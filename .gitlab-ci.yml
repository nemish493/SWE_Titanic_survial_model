image: docker:latest

stages:
  - build
  - test

variables:
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_TLS_VERIFY: "0"
  GIT_STRATEGY: clone

services:
  - name: docker:dind
    command: ["--tls=false"]

before_script:
  - apk add --no-cache git curl
  - git config --global url."https://${CI_JOB_TOKEN}:$CI_JOB_TOKEN@mygit.th-deg.de".insteadOf "https://mygit.th-deg.de"
  - echo "Giving Docker some time to start..."
  - sleep 15  # Give Docker some time to initialize
  - echo "Checking Docker status..."
  - docker info
  - echo "Stopping any existing containers"
  - if [ "$(docker ps -q)" ]; then docker ps -q | xargs docker stop; fi
  - if [ "$(docker ps -aq)" ]; then docker ps -aq | xargs docker rm; fi
  - docker network prune -f

build_model_backend:
  stage: build
  script:
    - echo "Cloning model service repository"
    - git clone https://mygit.th-deg.de/ainb_24_sancus/titanic_model_service titanic_model_service
    - echo "Contents of the current directory:"
    - ls -la
    - echo "Contents of the titanic_model_service directory:"
    - ls -la titanic_model_service
    - cd titanic_model_service
    - echo "Building model service image"
    - docker-compose build model_service
  timeout: 60m

build_web_backend:
  stage: build
  script:
    - echo "Building backend image"
    - docker-compose build backend
  timeout: 60m

build_frontend:
  stage: build
  script:
    - echo "Building frontend image"
    - docker-compose build frontend
  timeout: 60m

model_service_tests:
  stage: test
  script:
    - echo "Cloning model service repository"
    - git clone https://mygit.th-deg.de/ainb_24_sancus/titanic_model_service titanic_model_service
    - cd titanic_model_service
    - echo "Stopping any existing containers"
    - docker-compose down --remove-orphans || true
    - if [ "$(docker ps -q)" ]; then docker ps -q | xargs docker stop; fi
    - if [ "$(docker ps -aq)" ]; then docker ps -aq | xargs docker rm; fi
    - docker network prune -f
    - echo "Starting model service"
    - docker-compose up -d model_service
    - sleep 60  # Wait for the model service to be fully up
    - echo "Running model service pytest tests"
    - docker-compose exec model_service sh -c "pip install -r requirements.txt && pytest tests --junitxml=/app/test_report/pytest-report.xml"
  artifacts:
    when: always
    reports:
      junit: titanic_model_service/test_report/pytest-report.xml
    paths:
      - titanic_model_service/test_report/pytest-report.xml
  timeout: 60m

backend_tests:
  stage: test
  script:
    - echo "Stopping any existing containers"
    - docker-compose down --remove-orphans || true
    - if [ "$(docker ps -q)" ]; then docker ps -q | xargs docker stop; fi
    - if [ "$(docker ps -aq)" ]; then docker ps -aq | xargs docker rm; fi
    - docker network prune -f
    - echo "Starting backend service"
    - docker-compose up -d backend
    - sleep 60  # Wait for backend service to be fully up
    - docker-compose ps  # Check the status again
    - docker-compose logs backend  # Added logs to troubleshoot backend issues
    - echo "Running pytest tests"
    - docker-compose exec backend sh -c "pip install -r requirements.txt && pytest --junitxml=/app/backend/pytest-report.xml"
  artifacts:
    when: always
    reports:
      junit: backend/pytest-report.xml
    paths:
      - backend/pytest-report.xml
  timeout: 60m

frontend_tests:
  stage: test
  script:
    - echo "Stopping any existing containers"
    - docker-compose down --remove-orphans || true
    - if [ "$(docker ps -q)" ]; then docker ps -q | xargs docker stop; fi
    - if [ "$(docker ps -aq)" ]; then docker ps -aq | xargs docker rm; fi
    - docker network prune -f
    - echo "Starting frontend services"
    - docker-compose up -d frontend
    - sleep 60  # Wait for the frontend to be fully up
    - echo "Running Cypress tests"
    - docker-compose exec frontend sh -c "npm install && npx cypress run"
  artifacts:
    when: always
    paths:
      - vue-frontend/cypress/screenshots
      - vue-frontend/cypress/videos
  timeout: 60m
